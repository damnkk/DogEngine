#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive :enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64:require
#extension GL_EXT_scalar_block_layout :enable

#include "shaderDataStructure.h"

layout(location = 0) rayPayloadEXT hitPayLoad prd;

layout(set = 0,binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0,binding = 1,rgba32f) uniform image2D outputImage;
layout(set = 1,binding = 0) uniform cameraTransform{
    vec3 cameraPos;
    vec3 cameraDirection;
    mat4 viewMatrix;
    mat4 projMatrix;
}cameraTrans;

layout(push_constant,scalar) uniform RtPushConstant{
    int frameCount;
    int maxBound;
    vec4 clearColor;
}rtConst;

void main(){
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy)+vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 NDCxy = inUV*2.0f-1.0f;
    //camera pos
    vec3 origin = cameraTrans.cameraPos;
    vec4 target = inverse(cameraTrans.projMatrix)*vec4(NDCxy.x,NDCxy.y,1,1);
    vec4 rayDir = inverse(cameraTrans.viewMatrix)*vec4(normalize(target.xyz),0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax=  100000.0;
    prd.origin = origin;
    prd.direction = rayDir.xyz;
    prd.recursiveDepth = 0;
    prd.hitValue = vec3(0.0f);
    prd.history = vec3(1.0f);

    for(;prd.recursiveDepth<rtConst.maxBound;prd.recursiveDepth++){
        traceRayEXT(topLevelAS,
        rayFlags,
        0xFF,
        0,0,0,prd.origin,tMin,prd.direction, tMax,0);
        
    }

    if(rtConst.frameCount<=1){
        imageStore(outputImage,ivec2(gl_LaunchIDEXT.xy),vec4(prd.hitValue.xyz,1.0f));
    }else{
        float a = 1.0f/float(rtConst.frameCount+1);
        vec3 oldColor = imageLoad(outputImage,ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(outputImage,ivec2(gl_LaunchIDEXT.xy),vec4(mix(oldColor,prd.hitValue,a),1.0f));
        //imageStore(outputImage,ivec2(gl_LaunchIDEXT.xy),vec4(mix(oldColor,prd.hitValue,a),1.0f));
    }

    // traceRayEXT(topLevelAS,
    //     rayFlags,
    //     0xFF,
    //     0,0,0,prd.origin,tMin,prd.direction, tMax,0);
    //  imageStore(outputImage,ivec2(gl_LaunchIDEXT.xy),vec4(prd.hitValue.xyz,1.0f));
}
